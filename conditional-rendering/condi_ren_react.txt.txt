Conditional rendering in React allows you to control what content is displayed in your components based on certain conditions or criteria. You can use JavaScript expressions or conditional statements within your JSX code to determine whether to render specific elements, components, or content. This is a fundamental concept in React that allows you to create dynamic user interfaces.

Here are some common techniques for conditional rendering in React:

Using Conditional Statements:

You can use if statements, ternary operators, or switch statements to conditionally render content. Here's an example using a ternary operator:


function ConditionalRenderExample({ isLoggedIn }) {
  return (
    <div>
      {isLoggedIn ? (
        <p>Welcome, User!</p>
      ) : (
        <p>Please log in to access the content.</p>
      )}
    </div>
  );
}
In this example, the isLoggedIn prop determines whether to display a welcome message or a login prompt.

Using Logical Operators:

You can use logical operators like && and || to conditionally render content. The && operator is commonly used for simple conditional rendering:


function ConditionalRenderExample({ showElement }) {
  return (
    <div>
      {showElement && <p>This element is displayed.</p>}
    </div>
  );
}
The paragraph element is rendered only if showElement is true.

Using Functions for Conditional Logic:

You can define functions that contain your conditional logic and then call these functions within your JSX code. This can make your JSX code cleaner and more readable.


function shouldRenderElement(condition) {
  return condition ? <p>This element is displayed.</p> : null;
}

function ConditionalRenderExample({ showElement }) {
  return (
    <div>
      {shouldRenderElement(showElement)}
    </div>
  );
}
The shouldRenderElement function encapsulates the conditional logic.

Using Conditional Rendering in Lists:

When rendering lists, you can map over an array and conditionally render list items based on the array's contents:

function ListExample({ items }) {
  return (
    <ul>
      {items.map((item, index) => (
        item.isVisible && <li key={index}>{item.text}</li>
      ))}
    </ul>
  );
}
In this example, only items with isVisible set to true are rendered in the list.

Conditional Rendering with Logical OR:

You can use the logical OR operator (||) to provide a default value when rendering components. If the first expression is falsy, the second expression is used as the default:


function Greeting({ name }) {
  return <p>Hello, {name || 'Guest'}!</p>;
}
If name is not provided or is an empty string, it defaults to 'Guest'.

Conditional rendering is a powerful concept in React that allows you to create dynamic and responsive user interfaces by showing or hiding content based on specific conditions or user interactions. You can combine different conditional rendering techniques to build complex UIs that adapt to various scenarios.